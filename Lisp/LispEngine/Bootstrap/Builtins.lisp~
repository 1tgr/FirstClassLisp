(define list (lambda x x))
(define car (lambda ((x . y)) x))
(define cdr (lambda ((x . y)) y))
(define nil? (lambda (()) #t _ #f))
(define pair? (lambda ((_ . _)) #t _ #f))
(define let (macro
	      (lambda (var value body)
		     (list (list lambda (list var) body) value))))

;            b.add("list", "(lambda x x)");
;            b.add("car", "(lambda ((x . y)) x)");
;            b.add("cdr", "(lambda ((x . y)) y)");
;            b.add("nil?", "(lambda (()) #t _ #f)");
;            b.add("pair?", "(lambda ((_ . _)) #t _ #f)");
;            b.add("letdef", "(lambda (var value body) (list (list lambda (list var) body) value))");
;            b.add("let", "(macro letdef)");
